---
layout:     post
title:      "楚钦大神web技术分享 "
subtitle:   "关于web技术"
date:       2015-08-06
author:     "liuming09"
header-img: "img/post-bg-dashenguilai.jpeg"
tags:
    - 郭楚钦
	- 大牛
	- web
	- 技术分享
---


# 郭楚钦技术分享 #

## web请求 ##

1. 发起请求
2. 等待响应（后端处理）
3. 接收响应

### 发起请求 ###
1. 地址栏（用户输入，超链接，重定向）
2. 表单提交
3. Ajax （？）
	1. 同步异步，不可跨域，支持大数据，交互性强（可回调）
4. 利用页面特殊元素（jsonp,img,ifame）
	1. 异步，可跨域，只支持get，交互性强，安全，易嵌入
5. （fiddler模拟请求算不算，fiddler算是一个代理吧）
6. 自己开发 （curl ,wget ,客户端）

### 状态码 ###
1. 1xx 请求接受，继续
2. 2xx 成功
3. 3xx 信息重定向
4. 4xx 客户端错误
5. 5xx 服务器错误

### 结构调整 ###
1. 动静分离
	1. 动态请求，静态请求
2. 数据分离
3. 逻辑分离
4. CDN （静态请求加速中间层：cache）
5. 压力分散
6. 使用缓存
7. 多机房容灾（IDC）

### 静态文件优化 ###
1. 前端缓存：通常**不缓存**html文件，图片值新增，不删除，不更新
2. `压缩`：可以减少90%左右流量
3. 反向代理作缓存： squid/nginx
4. 服务器选择： nginx/lighttpd
5. cdn:

### 动态请求的优化 ###
1. 适当的服务器结构
	1. nginx
	2. fast cgi(fpm) :hhvm
	3. eaccelerator/apc
2. 解决瓶颈
	1. Memcache
	2. 异步化写入（mq，redis）
	3. 数据库读写分离
	4. Sql优化
3. 分散压力（**DNS**(配置多个ip，轮询式，负载均衡)/**LVS**（多台机器虚拟成一个ip）/GLSB/CDN）
	1. DNS（回话易丢失，生效时间长，无权重概念），公司内部有成熟方案实现负载均衡（**bvs？**）
4. 逻辑调整，优化
	1. 合并请求（批量）
	2. 平时维护，避免实时运算
	3. 需求调整
5.  语言级别的优化
	1.  非必要
	
### 数据存储 ###
1. 读写分离
2. 分表分库
	1. 按**id**分/按时间分/按类型分
	2. 数据性质
3. 读出缓存，写入缓冲
4. 适度冗余
	1. 冗余——避免频繁的表连接
5. no-sql

### 数据安全 ###
1. 静态存储多副本
	1. 简单实现：写入式写入多个副本，nfs + rsync
	2. 使用现有的分布式存储系统：
		1. 开源：MFS/DFS
		2. 百度内部：NFS/BOS
2. DB主从热备（主动，实时同步），定时冷备（每日定时同步一份）

### 访问控制 ###
1. 内部运营平台不对外开放
2. 系统权限控制
3. 操作日志
4. Ip白名单

### 后台脚本与服务开发 ###
1. php/c++
2. php脚本
3. shell脚本：日志分析
4. c++网络服务器开发和优化
5. python为第二语言 